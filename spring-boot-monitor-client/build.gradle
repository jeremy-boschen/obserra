plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    }
}

dependencies {
    // Spring Boot dependencies (minimal set)
    compileOnly 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'

    // Spring Boot Auto Configuration
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INHERIT
}

// Create a sources jar
tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

// Create a javadoc jar
tasks.register('javadocJar', Jar) {
    from tasks.javadoc
    archiveClassifier.set('javadoc')
}

// Configure Maven publishing
publishing {
    publications { PublicationContainer container ->
        container.create("mavenJava", MavenPublication) { MavenPublication publication ->
            publication.from(project.components.java)
            publication.artifact(tasks.named('sourcesJar'))
            publication.artifact(tasks.named('javadocJar'))

            publication.pom { MavenPom pom ->
                pom.name = 'Spring Boot Monitor Client'
                pom.description = 'Client library for Spring Boot applications to register with the monitoring dashboard'
                pom.url = 'https://github.com/jeremy-boschen/spring-boot-monitor'

                pom.licenses { MavenPomLicenseSpec licenses ->
                    licenses.license { MavenPomLicense license ->
                        license.name = 'MIT License'
                        license.url = 'https://opensource.org/licenses/MIT'
                    }
                }

                pom.developers { MavenPomDeveloperSpec developers ->
                    developers.developer { MavenPomDeveloper developer ->
                        developer.id = 'jeremy-boschen'
                        developer.name = 'Jeremy Boschen'
                        developer.email = 'jeremy.boschen@gmail.com'
                    }
                }
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
}

// Disable the Spring Boot application plugin to build as a library
tasks.bootJar {
    enabled = false
}

// Enable the java library jar
tasks.jar {
    enabled = true

    // Ensure auto-configuration metadata is included
    from('build/classes/java/main') {
        include 'META-INF/**'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}
